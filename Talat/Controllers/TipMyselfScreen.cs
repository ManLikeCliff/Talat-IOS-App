// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CoreAnimation;
using Foundation;
using Newtonsoft.Json;
using Talat.Models;
using Talat.TableSources;
using Talat.Utils;
using UIKit;

namespace Talat
{
	public partial class TipMyselfScreen : UIViewController
	{
		public TipMyselfScreen (IntPtr handle) : base (handle)
		{
		}

        UIPickerView TMPicker = new UIPickerView();
        UIPickerView GetTippedPicker = new UIPickerView();
        private string tipPercentage;

        List<TipTransactions> tipTransactions = new List<TipTransactions>();

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            GetWalletStatus();
            GetWalletHistory();

            Title = "Tip Myself Menu";

            showRestTMSwitch.ValueChanged += ShowRestTMSwitch_ValueChanged;

            AddTMField();
            TMTextField();

            AddGetTippedField();
            GetTippedTextField();
        }

        private async void GetWalletHistory()
        {
            var user = MemoryManager.getUseAccountLogin("user_key");
            {
                if (user != null)
                {
                    var reult = await NetworkUtil.GetQueryAsyc("Transactions/WalletHistory", user.acctNumber, "AcctNumber");
                    if (!string.IsNullOrEmpty(reult))
                    {
                        TipTransactions[] gottenTransactions = JsonConvert.DeserializeObject<TipTransactions[]>(reult);

                        foreach (TipTransactions transaction in gottenTransactions)
                        {
                            tipTransactions.Add(transaction);
                        }
                        tipTransactionTableView.Source = new TipTransactionTableSource(tipTransactions);
                        tipTransactionTableView.ReloadData();
                    }
                }
            }
        }

        private void ShowRestTMSwitch_ValueChanged(object sender, EventArgs e)
        {
            if (!showRestTMSwitch.On && !TMRestView.Hidden)
            {
                PostTipStatus(false, 0.ToString());
            }


            if (showRestTMSwitch.On)
                TMRestView.Hidden = false;
            else
                TMRestView.Hidden = true;

          
        }

        //TM Percentage pickerView

        private void AddTMField()
        {
            var tmList = new List<string> {
                "5%", "10%", "15%", "20%"
            };

            var picker = new TMPickerModel(tmList);

            TMPicker.Model = picker;

            picker.ValueChanged += (sender, e) => {

                TMPercentageValue.Text = picker.SelectedTMPercentageByUser; //Update The Selected Value In the TextField
                tipPercentage = picker.SelectedTMPercentageByUser;
                //sendMoneyRestView.Hidden = false;

                View.EndEditing(true);// To Dismiss the Picker View Once The User Select The Value
            };
        }

        private void TMTextField()
        {
            TMPercentageValue.Placeholder = "Select";
            TMPercentageValue.Layer.CornerRadius = 15;
            TMPercentageValue.TintColor = UIColor.White;
            TMPercentageValue.Layer.MasksToBounds = true;
            TMPercentageValue.AttributedPlaceholder = new NSAttributedString(TMPercentageValue.AttributedPlaceholder.Value, foregroundColor: UIColor.White);
            TMPercentageValue.Layer.SublayerTransform = CATransform3D.MakeTranslation(0, 0, 5); //to Create a Space At The beginning of the text field

            TMPercentageValue.InputView = TMPicker;
        }


        //When to get tipped pickerView

        private void AddGetTippedField()
        {
            var getTippedList = new List<string> {
                "On every debit", "When I buy data", "When I recharge", "When I send money", "When I pay bills (electricity, TV subscription, etc.)"
            };

            var picker = new TMChoicePickerModel(getTippedList);

            GetTippedPicker.Model = picker;

            picker.ValueChanged += (sender, e) =>
            {

                WhenToGetTipped.Text = picker.SelectedWhenToGetTippedByUser; //Update The Selected Value In the TextField

                TMRestView.Hidden = false;

                View.EndEditing(true);// To Dismiss the Picker View Once The User Select The Value

                //After choosing this, let's call the APi to update the USers Choice
                if (!TMRestView.Hidden)
                {
                    PostTipStatus(true, tipPercentage);
                }
             
            };
        }

        private void GetTippedTextField()
        {
            WhenToGetTipped.Placeholder = "Select";
            WhenToGetTipped.Layer.CornerRadius = 15;
            WhenToGetTipped.TintColor = UIColor.White;
            WhenToGetTipped.Layer.MasksToBounds = true;
            WhenToGetTipped.AttributedPlaceholder = new NSAttributedString(WhenToGetTipped.AttributedPlaceholder.Value, foregroundColor: UIColor.White);
            WhenToGetTipped.Layer.SublayerTransform = CATransform3D.MakeTranslation(0, 0, 5); //to Create a Space At The beginning of the text field

            WhenToGetTipped.InputView = GetTippedPicker;
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            this.NavigationController.NavigationBarHidden = false;
        }

        //Get the current Tip Status of the User.
        public async void PostTipStatus(bool tipStatus, string percentage)
        {
            if (!string.IsNullOrEmpty(percentage))
            {
                string newP = percentage.Replace("%", "");
                TipPostingClass tipPostingClass = new TipPostingClass() { tipPercent = newP, tipStatus = tipStatus };
                var user = MemoryManager.getUseAccountLogin("user_key");
                if (user != null)
                {
                    string raw = JsonConvert.SerializeObject(tipPostingClass);
                    var result = await NetworkUtil.PostGeneralQueryAsyc("TipWallet/ActivateStatus", raw, user.acctNumber, "acctNum");
                    if (!string.IsNullOrEmpty(result))
                    {
                        var data = JsonConvert.DeserializeObject<WalletDetailsResponse>(result);
                        if (data != null)
                        {
                            showRestTMSwitch.On = data.tipStatus;
                            TMPercentageValue.Text = $"{data.tipPercent}%";
                            //Do anything with the response data.
                        }
                    }

                }
            }
            
        }  //Get the current Tip Status of the User.
        public async void GetWalletStatus()
        {
            var user = MemoryManager.getUseAccountLogin("user_key");
            if (user != null)
            {
                var result = await NetworkUtil.GetQueryAsyc("Users/WalletDetail", user.acctNumber, "acctNumber");
                if(!string.IsNullOrEmpty(result))
                {
                    var mData = JsonConvert.DeserializeObject<WalletDetailsResponse>(result);
                    if(mData != null)
                    {
                        ///Here we are setting the users Default state
                        showRestTMSwitch.On = mData.tipStatus;
                        TMPercentageValue.Text = $"{mData.tipPercent}%";
                        if (mData.tipStatus)
                        {
                            TMRestView.Hidden = false;
                        }
                    }
                }

            }
        }




    }
}
