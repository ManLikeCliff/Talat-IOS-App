// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using Foundation;
using Newtonsoft.Json;
using Talat.Models;
using Talat.Utils;
using UIKit;
using Xamarin.Essentials;

namespace Talat
{
	public partial class DashboardScreen : UIViewController
	{
        public decimal accBalance;
        public string accName;
        public string accNumber;

        public decimal tipBalance;
        public string tipPercentage;
        public string tipStatus;

		public DashboardScreen (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            dashSV.ShowsHorizontalScrollIndicator = false;
            dashSV.ContentSize = dashView.Frame.Size;
            dashSV.Scrolled += (sender, e) => {
                dashPageControl.CurrentPage = (nint)(dashSV.ContentOffset.X / dashSV.Frame.Width);
            };

            accNameLabel.Text = accName;
            accNumberLabel.Text = accNumber;
            accBalanceLabel.Text = "₦" + accBalance.ToString("N0");

            tipPercentageLabel.Text = tipPercentage + "%";
            tipStatusLabel.Text = tipStatus;
            tipBalanceLabel.Text = "₦" + tipBalance.ToString("N0");

            dashCopyClipboard.TouchUpInside += DashCopyClipboard_TouchUpInside;
        }

        private void DashCopyClipboard_TouchUpInside(object sender, EventArgs e)
        {
            Clipboard.SetTextAsync(accNumberLabel.Text);

            Util.showDialog("Paste Anywhere", "Account number copied!", this);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            this.NavigationController.NavigationBarHidden = true;

            getUserWalletBalance();

            getTipWalletBalance();
        }

        public DashboardScreen() : base()
        {

        }

        private async void getUserWalletBalance()
        {
            var user = MemoryManager.getUseAccountLogin("user_key");
            {
                if(user != null)
                {
                    var reult = await NetworkUtil.GetQueryAsyc("Users/UserDetails", user.acctNumber, "acctNum");
                    if (!string.IsNullOrEmpty(reult))
                    {
                        var result = JsonConvert.DeserializeObject<LoginResponse>(reult);
                        if (result != null)
                        {
                            accBalanceLabel.Text = "₦" + result.acctBalance.ToString("N0");
                            MemoryManager.setUserAccountLog(result,"user_key");
                        }

                    }
                }
            }
            
        }


        private async void getTipWalletBalance()
        {
            var user = MemoryManager.getUseAccountLogin("user_key");
            {
                if (user != null)
                {
                    var reult = await NetworkUtil.GetQueryAsyc("Users/WalletDetail", user.acctNumber, "acctNumber");
                    if (!string.IsNullOrEmpty(reult))
                    {
                        var result = JsonConvert.DeserializeObject<LoginResponse>(reult);
                        if (result != null)
                        {
                            TipShaerd tipShaerd = new TipShaerd() { percent = result.tipPercent, status = result.tipStatus };

                            MemoryManager.setSuccessScreenTipStatus(tipShaerd, "tip_key");

                            tipBalanceLabel.Text = "₦" + result.walletBalance.ToString("N0");
                            tipPercentageLabel.Text = $"{result.tipPercent}%";
                            if (result.tipStatus) {
                                tipStatusLabel.Text = "ACTIVE";
                            }
                            else { tipStatusLabel.Text = "IN-ACTIVE"; }
                            MemoryManager.setUserAccountLog(result, "user_key");
                        }

                    }
                }
            }

        }
    }
}
