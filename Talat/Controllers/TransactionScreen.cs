// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net.Http;
using System.Threading.Tasks;
using Foundation;
using Newtonsoft.Json;
using Talat.Models;
using Talat.TableSources;
using Talat.Utils;
using UIKit;

namespace Talat
{
	public partial class TransactionScreen : UIViewController
	{
        public decimal accBalance;
        public string accName;
        public string accNumber;

        List<Transactions> transactions = new List<Transactions>();
        List<TipTransactions> tipTransactions = new List<TipTransactions>();

        HttpClient client;

        public TransactionScreen (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            NavigationItem.HidesBackButton = true;

            Title = "Transaction History";

            transLoader.Hidden = false;
            transLoader.StartAnimating();

            toDashboardBtn.Clicked += ToDashboardBtn_Clicked;

            //segmentedControl.AddTarget(this, "", UIControlEvent.ValueChanged);



            //transactionTableView.Source = new TransactionTableSource(transactions);

            UISegmentedControl.Appearance.SetTitleTextAttributes(new UITextAttributes { TextColor = UIColor.White }, UIControlState.Selected);

            //GetTransactions().Wait(200);
            firstTab();
            segmentedControl.ValueChanged += SegmentedControl_ValueChanged;
        }

        private void ToDashboardBtn_Clicked(object sender, EventArgs e)
        {
            foreach (var vc in NavigationController.ViewControllers)
            {
                if (vc is DashboardScreen)
                {
                    NavigationController?.PopToViewController(vc, animated: true);

                }
            }
        }

        private void SegmentedControl_ValueChanged(object sender, EventArgs e)
        {
            UISegmentedControl control = sender as UISegmentedControl;
            switch (control.SelectedSegment)
            {
                case 0:
                    firstTab();
                    break;
                case 1:
                    //secondTab();
                    GetWalletHistory();
                    break;
            }
        }


        //public async Task GetTransactions()
        //{
        //    transLoader.Hidden = false;

        //    transLoader.StartAnimating();

        //    client = new HttpClient(NetworkUtil.GetInsecureHandler());

        //    var user = MemoryManager.getUseAccountLogin("user_key");

        //    string url = "https://tipproj.azurewebsites.net/api/Transactions/TransactionHistory?AcctNumber=" + user.acctNumber;

        //    HttpResponseMessage response = await client.GetAsync(url);

        //    var responseContent = await response.Content.ReadAsStringAsync();

        //    transLoader.StopAnimating();

        //    //Console.WriteLine(responseContent);

        //    if (response.IsSuccessStatusCode)
        //    {
        //        Transactions[] gottenTransactions = JsonConvert.DeserializeObject<Transactions[]>(responseContent);

        //        foreach (Transactions transaction in gottenTransactions)
        //        {
        //            transactions.Add(transaction);
        //        }
        //        transactionTableView.ReloadData();
        //    }
        //    else
        //    {
        //        //Console.WriteLine("hehehehehe");
        //    }
        //}

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            this.NavigationController.NavigationBarHidden = false;

            getUserWalletBalance();
        }

        private async void getUserWalletBalance()
        {
            var user = MemoryManager.getUseAccountLogin("user_key");
            {
                if (user != null)
                {
                    var reult = await NetworkUtil.GetQueryAsyc("Users/UserDetails", user.acctNumber, "acctNum");
                    if (!string.IsNullOrEmpty(reult))
                    {
                        var result = JsonConvert.DeserializeObject<LoginResponse>(reult);
                        if (result != null)
                        {
                            transCardBalance.Text = "â‚¦" + result.acctBalance.ToString("N0");
                            transCardName.Text = result.acctName;
                            transCardNumber.Text = result.acctNumber;
                            MemoryManager.setUserAccountLog(result, "user_key");
                        }

                    }
                }
            }

        }

        private async void GetWalletHistory()
        {
            var user = MemoryManager.getUseAccountLogin("user_key");
            {
                if (user != null)
                {
                    var reult = await NetworkUtil.GetQueryAsyc("Transactions/WalletHistory", user.acctNumber, "AcctNumber");
                    if (!string.IsNullOrEmpty(reult))
                    {
                        TipTransactions[] gottenTransactions = JsonConvert.DeserializeObject<TipTransactions[]>(reult);

                        tipTransactions = new List<TipTransactions>();

                        tipTransactionTableView.Source = new TipTransactionTableSource(tipTransactions);

                        foreach (TipTransactions transaction in gottenTransactions)
                        {
                            tipTransactions.Add(transaction);
                        }
                        transactionTableView.Hidden = true;

                        tipTransactionTableView.Hidden = false;

                        //tipTransactionTableView.Source = new TipTransactionTableSource(tipTransactions);
                        tipTransactionTableView.ReloadData();
                    }
                }
            }
        }


        private async void firstTab()
        {
            var user = MemoryManager.getUseAccountLogin("user_key");
            {
                if (user != null)
                {
                    var reult = await NetworkUtil.GetQueryAsyc("Transactions/TransactionHistory", user.acctNumber, "AcctNumber");
                    if (!string.IsNullOrEmpty(reult))
                    {
                    Transactions[] gottenTransactions = JsonConvert.DeserializeObject<Transactions[]>(reult);

                        transactions = new List<Transactions>();

                        transactionTableView.Source = new TransactionTableSource(transactions);

                    foreach (Transactions transaction in gottenTransactions)
                    {
                        transactions.Add(transaction);
                    }
                        transactionTableView.Hidden = false;

                        tipTransactionTableView.Hidden = true;

                        //transactions.RemoveAll();

                        transLoader.StopAnimating();
                        transactionTableView.ReloadData();
                    }
                }
            }
        }

        //private async void secondTab()
        //{

        //    //  Util.showDialog("UI Left", "Endpoint Consumed Already..", this);

        //    var user = MemoryManager.getUseAccountLogin("user_key");
        //    {
        //        if (user != null)
        //        {
        //            var reult = await NetworkUtil.GetQueryAsyc("Transactions/WalletHistory", user.acctNumber, "AcctNumber");
        //            if (!string.IsNullOrEmpty(reult))
        //            {
        //                Transactions[] gottenTransactions = JsonConvert.DeserializeObject<Transactions[]>(reult);

        //                foreach (Transactions transaction in gottenTransactions)
        //                {
        //                    transactions.Add(transaction);
        //                }
        //                transactionTableView.Source = new TransactionTableSource(transactions);
        //                transactionTableView.ReloadData();
        //            }
        //        }
        //    }
            
        //}
    }
}
