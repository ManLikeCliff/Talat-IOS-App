// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CoreGraphics;
using System.Threading.Tasks;
using Talat.Utils;
using CoreFoundation;
using Newtonsoft.Json;
using Talat.Models;

namespace Talat
{
	public partial class LoginScreen : UIViewController
	{
        private LoginResponse loginResponse;

        public string accNameLogin;
        public string accNumberLogin;
        public decimal accBalanceLogin;

        public string newEmail;

		public LoginScreen (IntPtr handle) : base (handle)
		{
		}

        UIImageView passToggleOffIcon = new UIImageView();

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            loginLoading.HidesWhenStopped = true;

            var defaultEmail = NSUserDefaults.StandardUserDefaults.StringForKey("Email");
            if (defaultEmail != null)
            {
                EmailTextView.Text = defaultEmail;
            }

            var defaultPassword = NSUserDefaults.StandardUserDefaults.StringForKey("Password");
            if (defaultPassword != null)
            {
                PasswordTextView.Text = defaultPassword;
            }

            LoginToDashboard.Enabled = true;

            if (!string.IsNullOrEmpty(newEmail)){
                EmailTextView.Text = newEmail;
            }

            // EmailIcon
            UIImageView emailIcon = new UIImageView();
            emailIcon.Image = UIImage.FromBundle("carbon_email-new");

            UIView contentView = new UIView();
            contentView.AddSubview(emailIcon);

            contentView.Frame = new CGRect(0, 0, UIImage.FromBundle("carbon_email-new").Size.Width+20, UIImage.FromBundle("carbon_email-new").Size.Height);
            emailIcon.Frame = new CGRect(10, 0, UIImage.FromBundle("carbon_email-new").Size.Width, UIImage.FromBundle("carbon_email-new").Size.Height);

            EmailTextView.LeftView = contentView;
            EmailTextView.LeftViewMode = UITextFieldViewMode.Always;



            // PasswordIcon
            UIImageView passIcon = new UIImageView();
            passIcon.Image = UIImage.FromBundle("carbon_password");

            UIView contentPassView = new UIView();
            contentPassView.AddSubview(passIcon);

            contentPassView.Frame = new CGRect(0, 0, UIImage.FromBundle("carbon_password").Size.Width + 20, UIImage.FromBundle("carbon_password").Size.Height);
            passIcon.Frame = new CGRect(10, 0, UIImage.FromBundle("carbon_password").Size.Width, UIImage.FromBundle("carbon_password").Size.Height);

            PasswordTextView.LeftView = contentPassView;
            PasswordTextView.LeftViewMode = UITextFieldViewMode.Always;



            // PasswordToggleOffIcon
            
            passToggleOffIcon.Image = UIImage.FromBundle("ph_eye-closed");

            UIView contentPassToggleOffView = new UIView();
            contentPassToggleOffView.AddSubview(passToggleOffIcon);

            contentPassToggleOffView.Frame = new CGRect(0, 0, UIImage.FromBundle("ph_eye-closed").Size.Width + 8, UIImage.FromBundle("ph_eye-closed").Size.Height);
            passToggleOffIcon.Frame = new CGRect(-10, 0, UIImage.FromBundle("ph_eye-closed").Size.Width, UIImage.FromBundle("ph_eye-closed").Size.Height);

            PasswordTextView.RightView = contentPassToggleOffView;
            PasswordTextView.RightViewMode = UITextFieldViewMode.Always;

            var taprecognizer = new UITapGestureRecognizer(HidePassword);
            contentPassToggleOffView.UserInteractionEnabled = true;
            contentPassToggleOffView.AddGestureRecognizer(taprecognizer);


            EmailTextView.Layer.BorderColor = UIColor.FromName(name:"outline_color").CGColor;   //("AB2656")


            EmailTextView.Layer.BorderWidth = 1.5f;
            EmailTextView.Layer.CornerRadius = 20;
            EmailTextView.ClipsToBounds = true;

            PasswordTextView.Layer.BorderColor = UIColor.FromName(name: "outline_color").CGColor;
            PasswordTextView.Layer.BorderWidth = 1.5f;
            PasswordTextView.Layer.CornerRadius = 20;
            PasswordTextView.ClipsToBounds = true;

            LoginToDashboard.TouchUpInside += LoginToDashboard_TouchUpInside;
        }

        private void LoginToDashboard_TouchUpInside(object sender, EventArgs e)
        {
            loginLoading.StartAnimating();

            LoginToDashboard.UserInteractionEnabled = false;

            //UIApplication.SharedApplication.BeginIgnoringInteractionEvents();

            //await Task.Delay(5000);

            ValidateLogin(EmailTextView, PasswordTextView);
        }



        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {

            

            base.PrepareForSegue(segue, sender);
           
           if(segue.DestinationViewController is DashboardScreen)
            {
                var dashboardScreen = segue.DestinationViewController as DashboardScreen;

                dashboardScreen.accBalance = accBalanceLogin;
                dashboardScreen.accName = accNameLogin;
                dashboardScreen.accNumber = accNumberLogin;
                    
            }


        }

        private async void ValidateLogin(UITextField email, UITextField password)
        {
            
            if (!checkEmpty(email.Text.ToString()) && !checkEmpty(password.Text.ToString()))
            {
                LoginModel loginModel = new LoginModel() { email = email.Text.ToString(), password = password.Text.ToString() };
                string mRawData = JsonConvert.SerializeObject(loginModel);
                var result = await NetworkUtil.PostGeneralRequestAsyc("Users/login", mRawData);
                
                if (!string.IsNullOrEmpty(result))
                {
                    loginResponse = JsonConvert.DeserializeObject<LoginResponse>(result);
                    MemoryManager.setUserAccountLog(loginResponse, "user_key");

                    accNumberLogin = loginResponse.acctNumber;
                    accNameLogin = loginResponse.acctName;
                    accBalanceLogin = (decimal)loginResponse.acctBalance;

                    NSUserDefaults.StandardUserDefaults.SetString(EmailTextView.Text, "Email");
                    NSUserDefaults.StandardUserDefaults.SetString(PasswordTextView.Text, "Password");

                    PerformSegue("toDashboard", this);
                }
                else
                {
                    UIAlertController uIAlert = UIAlertController.Create("Hahaha", "Invalid Username or Password", UIAlertControllerStyle.Alert);
                    var okAction = UIAlertAction.Create("No vex boss", UIAlertActionStyle.Default, null);

                    uIAlert.AddAction(okAction);

                    PresentViewController(uIAlert, true, null);

                    loginLoading.StopAnimating();

                    LoginToDashboard.UserInteractionEnabled = true;

                }
            }
            else {
                UIAlertController uIAlert = UIAlertController.Create("Error", "Fields cannot be empty",UIAlertControllerStyle.Alert);
                var okAction = UIAlertAction.Create("Okay", UIAlertActionStyle.Default, null);

                uIAlert.AddAction(okAction);

                PresentViewController(uIAlert, true, null);

                loginLoading.StopAnimating();

                LoginToDashboard.UserInteractionEnabled = true;

            }
        }


        private bool checkEmpty(string value)
        {
            return string.IsNullOrEmpty(value);
        }

        public void HidePassword(UITapGestureRecognizer taprecognizer)
        {
            if(passToggleOffIcon.Image == UIImage.FromBundle("ph_eye"))
            {
                PasswordTextView.SecureTextEntry = true;
                passToggleOffIcon.Image = UIImage.FromBundle("ph_eye-closed");
            }
            else
            {
                PasswordTextView.SecureTextEntry = false;
                passToggleOffIcon.Image = UIImage.FromBundle("ph_eye");
            }
        }


    }

   


}
